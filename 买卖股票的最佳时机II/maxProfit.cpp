/************************************************************************/
/** 
* 题目描述：
* 给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。
* 设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。
* 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
* 
* 实例1：
* 输入: [7,1,5,3,6,4]
* 输出: 7
* 解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
* 随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。
* 
* 示例2：
* 输入: [1,2,3,4,5]
* 输出: 4
* 解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
* 注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
* 因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
*
* 示例3：
* 输入: [7,6,4,3,1]
* 输出: 0
* 解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。

* 提示：
* 1 <= prices.length <= 3 * 10 ^ 4
* 0 <= prices[i] <= 10 ^ 4
*/
/************************************************************************/
#include <vector>
#include <iostream>

using namespace std;

int maxProfit(vector<int>& prices) 
{
	int len = prices.size();
	if (len < 1 || len > 30000)
	{
		return 0;
	}

	int profit = 0;
	int begin = 0;
	int end = 0;
	while (end < len - 1)
	{
		if (prices[end] > prices[end + 1])
		{
			int sub = prices[end] - prices[begin];
			profit += sub;

			begin = end + 1;
		}
		++end;
	}
	// end = len-1
	if (end == len - 1 && end > begin)
	{
		int sub = prices[end] - prices[begin];
		profit += sub;
	}

	return profit;
}

int main()
{
	int profit = 0;
	// 测试用例1：未初始化的数组
	vector<int> tst1;

	// 示例2
	int arr[] = {7,1,5,3,6,4};
	vector<int> tst2(arr, arr + sizeof(arr) / sizeof(int));

	// 示例3
	int arr3[] = {1,2,3,4,5};
	vector<int> tst3(arr3, arr3 + sizeof(arr3) / sizeof(int));

	// 示例4
	int arr4[] = {7,6,4,3,1};
	vector<int> tst4(arr4, arr4 + sizeof(arr4) / sizeof(int));

	profit = maxProfit(tst1);
	cout<<"示例1: "<<profit<<endl;

	profit = maxProfit(tst2);
	cout<<"示例2: "<<profit<<endl;

	profit = maxProfit(tst3);
	cout<<"示例2: "<<profit<<endl;

	profit = maxProfit(tst4);
	cout<<"示例2: "<<profit<<endl;

	return 0;
}