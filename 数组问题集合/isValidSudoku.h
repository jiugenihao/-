/************************************************************************/
/** 
* 题目：有效的数独
* 
* 判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。
*  1.数字 1-9 在每一行只能出现一次。
*  2.数字 1-9 在每一列只能出现一次。
*  3.数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次
*
* 数独部分空格内已填入了数字，空白格用 '.' 表示。
*
* 示例 1:
* 输入:
* [
* ["5","3",".",".","7",".",".",".","."],
* ["6",".",".","1","9","5",".",".","."],
* [".","9","8",".",".",".",".","6","."],
* ["8",".",".",".","6",".",".",".","3"],
* ["4",".",".","8",".","3",".",".","1"],
* ["7",".",".",".","2",".",".",".","6"],
* [".","6",".",".",".",".","2","8","."],
* [".",".",".","4","1","9",".",".","5"],
* [".",".",".",".","8",".",".","7","9"]
* ]
* 输出: true
*
* 示例 2:
* 输入:
* [
* ["8","3",".",".","7",".",".",".","."],
* ["6",".",".","1","9","5",".",".","."],
* [".","9","8",".",".",".",".","6","."],
* ["8",".",".",".","6",".",".",".","3"],
* ["4",".",".","8",".","3",".",".","1"],
* ["7",".",".",".","2",".",".",".","6"],
* [".","6",".",".",".",".","2","8","."],
* [".",".",".","4","1","9",".",".","5"],
* [".",".",".",".","8",".",".","7","9"]
* ]
* 输出: false
* 解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
* 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
* 
* 说明:
* 
* 一个有效的数独（部分已被填充）不一定是可解的。
* 只需要根据以上规则，验证已经填入的数字是否有效即可。
* 给定数独序列只包含数字 1-9 和字符 '.' 。
* 给定数独永远是 9x9 形式的。
*/
/************************************************************************/
#pragma once

#include "CommonHeaders.h"

namespace Solution 
{
	bool isValidSudoku(vector<vector<char>>& board) 
	{
		if (board.size() != 9)
		{
			return false;
		}

		for (auto row : board)
		{
			if (row.size() != 9)
			{
				return false;
			}
		}

		map<char, int> m_ij;				// row
		map<int, map<char, int> > m_ji;		// col
		map<int, map<char, int> > m_unit;	// unit

		for (int i = 0; i < 9; ++i)
		{
			// row
			m_ij.clear();
			for (int j = 0; j < 9; ++j)
			{
				char c = board[i][j];
				if (c == '.')
				{
					continue;
				}
				if (m_ij.find(c) != m_ij.end())
				{
					return false;
				} 
				else
				{
					m_ij[c] = 1;
				}
			}

			// col	
			for (int j = 0; j < 9; ++j)
			{
				char c = board[j][i];
				if (c == '.')
				{
					continue;
				}
				map<char, int> tmp = m_ji[i];
				if (tmp.find(c) != tmp.end())
				{
					return false;
				} 
				else
				{
					m_ji[i][c] = 1;
				}
			}

			// unit
			for (int j = 0; j < 9; ++j)
			{
				char c = board[i][j];
				if (c == '.')
				{
					continue;
				}
				int key = i / 3 * 10 + j / 3;
				map<char, int> tmp = m_unit[key];
				if (tmp.find(c) != tmp.end())
				{
					return false;
				} 
				else
				{
					m_unit[key][c] = 1;
				}
			}
		}

		return true;
	}


	
}